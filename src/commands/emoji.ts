import * as Discord from 'discord.js';
import { IBotCommand } from '../api';
import * as fs from 'fs';
import * as Configfile from '../config';
import { resolve } from 'dns';
import { rejects } from 'assert';

export default class emoji implements IBotCommand {
	private readonly _command = 'emoji';

	help(): string {
		return 'This is nothing';
		// throw new Error("Method not implemented.");
	}
	isThisCommand(command: string): boolean {
		return command === this._command;
		// throw new Error("Method not implemented.");
	}
	runCommand(args: string[], msgObject: Discord.Message, client: Discord.Client): void {
		// check if this command is allowed on this server
		for (let key of Configfile.config.restricted) {
			if (msgObject.guild.name == key) {
				return;
			}
		}
		//TODO fix this
		let globalThis = {
			emoji1: '1',
			emoji2: '2',
			emoji3: '3'
		};

		fs.readFile('./content/emojis.txt', function(err, data) {
			if (err) throw err;
			let dotaArr = data.toString().split('\n');
			let random = Math.floor(Math.random() * dotaArr.length);
			let randomDota = dotaArr[random];
			globalThis.emoji1 = randomDota;
		});
		fs.readFile('./content/emojis.txt', function(err, data) {
			if (err) throw err;
			let dotaArr = data.toString().split('\n');
			let random = Math.floor(Math.random() * dotaArr.length);
			let randomDota = dotaArr[random];
			globalThis.emoji2 = randomDota;
		});
		fs.readFile('./content/emojis.txt', function(err, data) {
			if (err) throw err;
			let dotaArr = data.toString().split('\n');
			let random = Math.floor(Math.random() * dotaArr.length);
			let randomDota = dotaArr[random];
			globalThis.emoji3 = randomDota;
		});

		const bar_styles = [
			'‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà',
			'‚£Ä‚£Ñ‚£§‚£¶‚£∂‚£∑‚£ø',
			'‚£Ä‚£Ñ‚£Ü‚£á‚£ß‚£∑‚£ø',
			'‚óã‚óî‚óê‚óï‚¨§',
			'‚ñ°‚ó±‚óß‚ñ£‚ñ†',
			'‚ñ°‚ó±‚ñ®‚ñ©‚ñ†',
			'‚ñ°‚ó±‚ñ•‚ñ¶‚ñ†',
			'‚ñë‚ñí‚ñì‚ñà',
			'‚ñë‚ñà',
			'‚¨ú‚¨õ',
			'‚ñ±‚ñ∞',
			'‚ñ≠‚óº',
			'‚ñØ‚ñÆ',
			'‚óØ‚¨§',
			'‚ö™‚ö´'
		];

		// execute
		let days = 365;
		let oneDay = 1000 * 60 * 60 * 24;

		let now = new Date();
		let start = new Date(now.getFullYear(), 0, 0);
		let diff = Math.abs(<any>new Date() - <any>new Date(start));
		let currentDay = Math.floor(diff / oneDay);
		let currentPerc = currentDay / days * 100;

		var bar = make_bar(currentPerc, bar_styles[0]) + '   ' + currentPerc.toFixed(2);

		msgObject.channel.send(bar);

		function repeat(s: string, i: number) {
			var r = '';
			for (var j = 0; j < i; j++) r += s;
			return r;
		}

		function make_bar(perc: number, bar_style: string | any[]) {
			var p = perc;

			var d,
				full,
				m,
				middle,
				r,
				rest,
				x,
				min_delta = Number.POSITIVE_INFINITY,
				full_symbol = bar_style[bar_style.length - 1],
				n = bar_style.length - 1;
			if (p == 100) return repeat(full_symbol, 10);
			p = p / 100;

			for (var i = 25; i >= 1; i--) {
				x = p * i;
				full = Math.floor(x);
				rest = x - full;
				middle = Math.floor(rest * n);
				if (p != 0 && full == 0 && middle == 0) middle = 1;
				d = Math.abs(p - (full + middle / n) / i) * 100;
				if (d < min_delta) {
					min_delta = d;
					m = bar_style[middle];
					if (full == i) m = '';
					r = repeat(full_symbol, full) + m + repeat(bar_style[0], i - full - 1);
				}

				return r;
			}
		}

		let embed = {
			username: 'client.user.username',
			avatar_url: 'client.user.avatarURL',
			content: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç',
			embeds: [
				{
					author: {
						name: 'Govnoed_Grisha',
						url: 'https://www.reddit.com/r/doge/',
						icon_url: 'client.user.avatarURL'
					},
					title: '–ö–∞–∫ –∂–µ –±—ã—Å—Ç—Ä–æ –ª–µ—Ç–∏—Ç –≤—Ä–µ–º—è, –Ω–µ –ø—Ä–∞–≤–¥–∞ –ª–∏?',
					url: 'https://google.com/',
					description:
						'–°–µ–≥–æ–¥–Ω—è —è —Å–Ω–æ–≤–∞ –ø—Ä–∏—à–µ–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤–∞–º, –∫–∞–∫ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –ø—Ä–æ–µ–±–∞–ª–∏ –≤–ø—É—Å—Ç—É—é. –ù—É –∏ –µ—â—ë —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –ø–æ–∫–∞–∑–∞—Ç—å, –≤—ã –∂–µ —Ç–∞–∫ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å–∏–ª–∏.',
					color: 15258703,
					fields: [
						{
							name: 'ü§î Year Progress',
							value: bar
						},
						{
							name: '–¢–æ–ø-3 —ç–º–æ–¥–∑–∏ —Å–µ–≥–æ–¥–Ω—è',
							value: '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–æ. –Ø —Å–µ—Ä—å–µ–∑–Ω–æ.'
						},
						{
							name: globalThis.emoji1,
							value: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å!'
						},
						{
							name: globalThis.emoji2,
							value: '–í—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ!',
							inline: true
						},
						{
							name: globalThis.emoji3,
							value: '–¢—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ!',
							inline: true
						}
					],
					thumbnail: {
						url: 'https://i.imgur.com/2p68pbG.jpg'
					},
					image: {
						url: 'https://i.imgur.com/2p68pbG.jpg'
					},
					footer: {
						text: '–í–∞—É! –ö–∞–∫ –∫–ª–∞—Å–Ω–æ! :smirk:',
						icon_url: 'https://i.imgur.com/AAeBJBp.png'
					}
				}
			]
		};
	}
}
